{"version":3,"sources":["components/Navegacion/Navegacion.js","views/Inicio.js","views/Registro.js","views/Curso.js","views/Contacto.js","App.js","serviceWorker.js","index.js"],"names":["Navegacion","className","to","activeClassName","Inicio","Registro","Curso","Contacto","useState","user","pass","datos","setDatos","imprimir","setImprimir","handleInputChange","event","target","name","value","onSubmit","preventDefault","type","placeholder","onChange","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQA2CeA,G,MAtCI,WAElB,OACC,yBAAKC,UAAU,cACd,4BACC,4BACC,kBAAC,IAAD,CACCC,GAAG,UACHC,gBAAgB,eAFjB,WAMD,4BACC,kBAAC,IAAD,CACCD,GAAG,YACHC,gBAAgB,eAFjB,aAMD,4BACC,kBAAC,IAAD,CACCD,GAAG,SACHC,gBAAgB,eAFjB,UAMD,4BACC,kBAAC,IAAD,CACCD,GAAG,YACHC,gBAAgB,eAFjB,iBCrBUC,EATA,WAEd,OACC,6BACC,oDCKYC,EATE,WAEhB,OACC,6BACC,sDCKYC,EATD,WAEb,OACC,6BACC,oD,uBCsCYC,MAzCf,WACC,IAAD,EAC6BC,mBAAS,CAAEC,KAAM,GAAIC,KAAM,KADxD,mBACSC,EADT,KACgBC,EADhB,OAEmCJ,mBAAS,SAF5C,mBAESK,EAFT,KAEmBC,EAFnB,KAMC,SAASC,EAAkBC,GAE1BJ,EAAS,eAAKD,EAAN,eAAcK,EAAMC,OAAOC,KAAQF,EAAMC,OAAOE,SAWzD,OACC,6BACC,oDACA,0BAAMC,SAVR,SAAqBJ,GAEpBA,EAAMK,iBACNP,EAAY,CAAEH,EAAMF,MAAS,CAAEE,EAAMD,SAQnC,2BAAOY,KAAK,OACTJ,KAAK,OACLK,YAAY,SACZC,SAAWT,IAEd,2BAAOO,KAAK,WACTJ,KAAK,OACLK,YAAY,gBACZC,SAAWT,IAEd,2BAAOO,KAAK,SAASH,MAAM,YAE5B,2BAAKN,KCIOY,MA3Bf,WACM,OACM,kBAAC,IAAD,KACM,yBAAKxB,UAAU,OAET,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACM,kBAAC,IAAD,CAAOyB,KAAK,WACN,kBAAC,EAAD,OAEN,kBAAC,IAAD,CAAOA,KAAK,aACN,kBAAC,EAAD,OAEN,kBAAC,IAAD,CAAOA,KAAK,UACN,kBAAC,EAAD,OAEN,kBAAC,IAAD,CAAOA,KAAK,aACN,kBAAC,EAAD,WCtBhBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c4a9d505.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink } from \"react-router-dom\";\r\nimport './Navegacion.css'\r\n\r\n\r\nconst Navegacion = () =>\r\n{\r\n\treturn(\r\n\t\t<nav className=\"Navegacion\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<NavLink \r\n\t\t\t\t\t\tto=\"/inicio\" \r\n\t\t\t\t\t\tactiveClassName=\"link-activo\">\r\n\t\t\t\t\t\tInicio\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<NavLink \r\n\t\t\t\t\t\tto=\"/registro\" \r\n\t\t\t\t\t\tactiveClassName=\"link-activo\">\r\n\t\t\t\t\t\tRegistro\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<NavLink \r\n\t\t\t\t\t\tto=\"/curso\" \r\n\t\t\t\t\t\tactiveClassName=\"link-activo\">\r\n\t\t\t\t\t\tCurso\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<NavLink \r\n\t\t\t\t\t\tto=\"/contacto\" \r\n\t\t\t\t\t\tactiveClassName=\"link-activo\">\r\n\t\t\t\t\t\tContacto\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t)\r\n}\r\n\r\nexport default Navegacion","import React from 'react'\r\n\r\nconst Inicio = () =>\r\n{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<p>Página de inicio</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Inicio","import React from 'react'\r\n\r\nconst Registro = () =>\r\n{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<p>Página de registro</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Registro","import React from 'react'\r\n\r\nconst Curso = () =>\r\n{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<p>Página del curso</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Curso","import React, { useState } from 'react'\r\n\r\n\r\nfunction Contacto()\r\n{\r\n\tconst [ datos, setDatos ] = useState({ user: '', pass: '' })\r\n\tconst [ imprimir, setImprimir ] = useState('vacio')\r\n\r\n\r\n\r\n\tfunction handleInputChange(event)\r\n\t{\r\n\t\tsetDatos({ ...datos, [event.target.name] : event.target.value })\r\n\t}\r\n\r\n\r\n\tfunction enviarDatos(event)\r\n\t{\r\n\t\tevent.preventDefault()\r\n\t\tsetImprimir([ datos.user ] + [ datos.pass ])\r\n\t}\r\n\r\n\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<p>Página de contacto</p>\r\n\t\t\t<form onSubmit={ enviarDatos }>\r\n\t\t\t\t<input type=\"text\" \r\n\t\t\t\t\t  name=\"user\" \r\n\t\t\t\t\t  placeholder=\"Nombre\"\r\n\t\t\t\t\t  onChange={ handleInputChange }\r\n\t\t\t\t/>\r\n\t\t\t\t<input type=\"password\" \r\n\t\t\t\t\t  name=\"pass\" \r\n\t\t\t\t\t  placeholder=\"Contraseña\"\r\n\t\t\t\t\t  onChange={ handleInputChange }\r\n\t\t\t\t/>\r\n\t\t\t\t<input type=\"submit\" value=\"Enviar\"/>\r\n\t\t\t</form>\r\n\t\t\t<p>{ imprimir }</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Contacto","import React from 'react';\nimport './App.css';\n\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport Navegacion from './components/Navegacion/Navegacion'\nimport Inicio from './views/Inicio'\nimport Registro from './views/Registro'\nimport Curso from './views/Curso'\nimport Contacto from './views/Contacto'\n\n\nfunction App() {\n      return (\n            <BrowserRouter>\n                  <div className=\"App\">\n\n                        <Navegacion/>\n\n                        <Switch>\n                              <Route path=\"/inicio\">\n                                    <Inicio/>\n                              </Route>\n                              <Route path=\"/registro\">\n                                    <Registro/>\n                              </Route>\n                              <Route path=\"/curso\">\n                                    <Curso/>\n                              </Route>\n                              <Route path=\"/contacto\">\n                                    <Contacto/>\n                              </Route>\n                        </Switch>\n\n                  </div>\n            </BrowserRouter>\n      );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}